from telegram.ext import Application, CommandHandler, ContextTypes
from telegram import Update
import sqlite3
import datetime
import pytz
import asyncio
import os

TOKEN = "7392929368:AAEiMeWKDSQ8dYUBqr8ekYy4J1ilagtYuQo"

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def init_db():
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            chat_id INTEGER,
            drug_name TEXT,
            time TEXT,
            timezone TEXT DEFAULT 'UTC',
            PRIMARY KEY (chat_id, drug_name)
        )
    ''')
    conn.commit()
    conn.close()

def add_to_db(chat_id, drug_name, time_str, timezone='UTC'):
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute("INSERT OR REPLACE INTO reminders VALUES (?, ?, ?, ?)", 
                 (chat_id, drug_name, time_str, timezone))
    conn.commit()
    conn.close()

def del_from_db(chat_id, drug_name):
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute("DELETE FROM reminders WHERE chat_id=? AND drug_name=?", 
                 (chat_id, drug_name))
    conn.commit()
    conn.close()

def get_reminders(chat_id):
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute("SELECT drug_name, time, timezone FROM reminders WHERE chat_id=?", 
                 (chat_id,))
    result = cursor.fetchall()
    conn.close()
    return result

def get_all_reminders():
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute("SELECT chat_id, drug_name, time, timezone FROM reminders")
    result = cursor.fetchall()
    conn.close()
    return result

def update_timezone(chat_id, timezone):
    conn = sqlite3.connect('pills.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE reminders SET timezone=? WHERE chat_id=?", 
                 (timezone, chat_id))
    conn.commit()
    conn.close()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üíä **–ë–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö**\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: `/timezone Europe/Moscow`\n"
        "–î–æ–±–∞–≤–∏—Ç—å: `/add –ú–∏—Ä—Ç–∞–∑–∞–ø–∏–Ω 22:00`\n"
        "–£–¥–∞–ª–∏—Ç—å: `/del –ú–∏—Ä—Ç–∞–∑–∞–ø–∏–Ω`\n"
        "–°–ø–∏—Å–æ–∫: `/list`\n\n"
        "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–π–º–∑–æ–Ω: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
    )

async def set_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    try:
        timezone = context.args[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω—ã
        if timezone not in pytz.all_timezones:
            await update.message.reply_text("‚õî –ù–µ–≤–µ—Ä–Ω–∞—è —Ç–∞–π–º–∑–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: `/timezone Europe/Moscow`")
            return
            
        update_timezone(chat_id, timezone)
        await update.message.reply_text(f"‚úÖ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone}")
        
    except IndexError:
        await update.message.reply_text("‚õî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/timezone Europe/Moscow`")

async def add_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    try:
        drug_name = context.args[0]
        drug_time = context.args[1]
        
        try:
            datetime.datetime.strptime(drug_time, "%H:%M")
        except ValueError:
            await update.message.reply_text("‚õî –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: `22:00`")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–∞–π–º–∑–æ–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        timezone = 'UTC'
        reminders = get_reminders(chat_id)
        if reminders and reminders[0][2]:  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
            timezone = reminders[0][2]
            
        add_to_db(chat_id, drug_name, drug_time, timezone)
        await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {drug_name} –≤ {drug_time} (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ {timezone})")

    except IndexError:
        await update.message.reply_text("‚õî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/add –õ–µ–∫–∞—Ä—Å—Ç–≤–æ 22:00`")

async def del_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    try:
        drug_name = context.args[0]
        del_from_db(chat_id, drug_name)
        await update.message.reply_text(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {drug_name}")
    except IndexError:
        await update.message.reply_text("‚õî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/del –õ–µ–∫–∞—Ä—Å—Ç–≤–æ`")

async def list_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    reminders = get_reminders(chat_id)
    
    if reminders:
        message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        for drug, time_str, timezone in reminders:
            message += f"- {drug} –≤ {time_str} (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ {timezone})\n"
    else:
        message = "‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
    
    await update.message.reply_text(message)

async def check_reminders(context: ContextTypes.DEFAULT_TYPE):
    reminders = get_all_reminders()
    
    for chat_id, drug_name, time_str, timezone in reminders:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–π–º–∑–æ–Ω–µ
            tz = pytz.timezone(timezone)
            now = datetime.datetime.now(tz).strftime("%H:%M")
            
            if now == time_str:
                await context.bot.send_message(chat_id, text=f"üîî –ü–æ—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å {drug_name}!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def main():
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î
        if os.path.exists('pills.db'):
            os.remove('pills.db')
            print("–°—Ç–∞—Ä–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞")
        
        init_db()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        app = Application.builder().token(TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("timezone", set_timezone))
        app.add_handler(CommandHandler("add", add_reminder))
        app.add_handler(CommandHandler("del", del_reminder))
        app.add_handler(CommandHandler("list", list_reminders))
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        job_queue = app.job_queue
        job_queue.run_repeating(check_reminders, interval=60.0)
        
        print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    try:
        from telegram.ext import Application, CommandHandler, ContextTypes
        from telegram import Update
        import pytz
        main()
    except ImportError:
        print("–û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install python-telegram-bot==20.3 pytz")